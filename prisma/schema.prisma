// npx prisma format
// npx prisma migrate dev --name init
// npx prisma generate
// npx prisma studio

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model User {
  id                 String          @id @default(cuid())
  name               String?
  email              String          @unique
  emailVerified      DateTime?
  image              String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  accounts           Account[]
  Authenticator      Authenticator[]
  comments           Comment[]
  commentLikes       CommentLike[]
  following          Follow[]        @relation("Following")
  followers          Follow[]        @relation("Followers")
  likes              Like[]
  actorNotifications Notification[]  @relation("ActorNotifications")
  notifications      Notification[]  @relation("UserNotifications")
  posts              Post[]
  profile            Profile?
  sessions           Session[]
  bookmarks          Bookmark[]
}

model Post {
  id           String         @id @default(cuid())
  userId       String
  imageUrl     String
  caption      String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  tags         String[]       @default([])
  comments     Comment[]
  likes        Like[]
  Notification Notification[]
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookmarks    Bookmark[]
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  bio       String?
  avatarUrl String?
  location  String?
  interests String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  edited    Boolean       @default(false)
  parentId  String?
  parent    Comment?      @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[]     @relation("CommentReplies")
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     CommentLike[]
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  actorId   String
  postId    String?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime
  actor     User             @relation("ActorNotifications", fields: [actorId], references: [id], onDelete: Cascade)
  post      Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User             @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  FOLLOW
  UNFOLLOW
  LIKE
  COMMENT
  MENTION
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}
